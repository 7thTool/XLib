#ifndef _XCHAIN_H_
#define _XCHAIN_H_

#include "XLib.h"
#include "XNode.h"

template<class T,class TBase = XNode>
class Record : public XNode2<T,TBase>
{

};

//////////////////////////////////////////////////////////////////////////
//消息/记录链
//1、消息只可以增加不可以删除
//2、消息可以自由添加也可以通过验证再添加，这要根据具体应用
//
//备注：
//1、每个节点通过非对称加密交换通讯秘钥和秘钥算法，再使用秘钥和秘钥算法加密通讯
//2、节点消息可以使用DHT技术实现分布式存储，这样整个网络是均衡的稳定的健壮的
//3、最终实现了网络中的消息的分布式安全存储

//记录：谁在什么时候做了什么事
struct RecordInfo //SIZE=256字节
{
	union
	{
		char Reserved[251];
		struct
		{
			union
			{
				unsigned short ver; //版本
				struct  
				{
					unsigned char mver; //主版本
					unsigned char cver;	//子版本
				};
			};
			union
			{
				unsigned short type; //类型
				struct  
				{
					unsigned char mtype; //主类型
					unsigned char ctype; //子类型
				};
			};
			int date; //日期 +/-YYYY-MM-DD 20160720（2016-7-20）
			unsigned int time; //时间 HH:mm:SS sss 091516614（9:15:16 614）
			char who[32]; //hash 谁
			char what[32]; //hash 什么
		};
	};
	unsigned int len; //数据长度
	char data[1]; //数据 事
};

//////////////////////////////////////////////////////////////////////////
//基于价值交换的自由的可验证的不可更改的信息网络，一种公有链方案
//
//节点
//1、每个节点都是对等的
//2、每个节点的创始信息都是0
//3、每个节点都要存储邻近节点信息（DHT技术实现）
//4、每个节点都可以生成流水信息
//5、每个节点都要校验每个流水信息的合法性
//6、一开始每个节点价值是0，随着参与的时间的累积，根据特定算法开始为整个网络付出的节点生成合理的价值，有了价值就可以进行价值交换了
//	（比如：创世节点一开始就有最大数量价值，然后分发价值出去，等分发完了所有价值之后，再从最大价值开始分发）
//备注：
//1、实现了消息的真实安全可靠
//2、实现了消息的分布式存储
//3、实现了网络的去中心化，而且更加稳定健壮，不受任何别有用心的人/组织的破坏
//
//衍生：
//1、创世节点可以是一个信用担保组织（企业/行业/国家/政府/区域性组织/全球性组织等），
//	每个节点可以使用现实中的各种资产抵押给该组织，该组织根据抵押品的价值，授予该节点相等价值的数字价值。
//	这样就实现了现实和网络世界的互通共存共荣，进而最终实现数字价值世界，在数字世界里每个人的信息都是匿名的，每个节点又都是公开的，这是一个奇妙的世界。
//

//////////////////////////////////////////////////////////////////////////
//基于授信不可更改的消息/记录链，一种私有链方案
//
//根节点
//1、记录所有节点
//2、直接给节点增加消息（增加价值类数据，比如给节点A增加100￥）
//3、不记录流水信息
//
//记录节点
//1、记录流水信息（分布式记录流水信息，不是所有节点都存所有流水信息，可以基于DHT技术实现）
//2、校验每个流水信息的合法性
//
//普通节点
//1、生成流水信息（流水信息需要通过记录节点的确认）
//
//备注：
//1、实现了消息的真实安全可靠
//2、实现了消息的分布式存储，部分网络的去中心化，即使中心服务器宕机，除了根节点的功能2外，整个网络都是正常运行的
//

//////////////////////////////////////////////////////////////////////////
//协议

class AuthenticRecord : Record<AuthenticRecord,RecordInfo>
{
public:
};

//消息链表管理（记录员）
class AuthenticRecorder
{
protected:
	AuthenticRecord m_RecordChain;

public:
	//载入节点消息记录
	virtual void LoadRecord()
	{

	}


protected:
	//收到一条消息记录
	virtual void OnReceiveRecord(RecordInfo r)
	{

	}

	//发出一条消息记录
	virtual void OnSendRecord(RecordInfo r)
	{

	}
};

#endif//_XCHAIN_H_